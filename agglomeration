import numpy as np

def euclidean_distance(x, y):
    return np.sqrt(np.sum((x - y) ** 2))

def single_linkage(cluster1, cluster2):
    min_distance = float('inf')
    for pt1 in cluster1:
        for pt2 in cluster2:
            distance = euclidean_distance(pt1, pt2)
            if distance < min_distance:
                min_distance = distance
    return min_distance

def agglomerative_clustering(data, n_clusters):
    clusters = [[point] for point in data]

    while len(clusters) > n_clusters:
        min_distance = float('inf')
        merge_indices = None

        for i in range(len(clusters)):
            for j in range(i + 1, len(clusters)):
                distance = single_linkage(clusters[i], clusters[j])
                print(distance)
                if distance < min_distance:
                    min_distance = distance
                    merge_indices = (i, j)

        i, j = merge_indices
        clusters[i].extend(clusters[j])
        del clusters[j]

    return clusters


n_clusters = int(input("Enter the number of clusters: "))
data = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])

clusters = agglomerative_clustering(data, n_clusters)

for i, cluster in enumerate(clusters):
    print(f'Cluster {i + 1}: {cluster}')
