import numpy as np

damping_factor = 0.85
max_iterations = 10
tolerance = 1e-5

def calculate_pagerank(adjacency_matrix):
    num_pages = len(adjacency_matrix)
    teleport_prob = (1 - damping_factor) / num_pages
    pagerank = np.full(num_pages, 1.0 / num_pages)

    for iteration in range(max_iterations):
        new_pagerank = np.zeros(num_pages)

        for i in range(num_pages):
            for j in range(num_pages):
                if adjacency_matrix[j][i] == 1:
                    num_links_on_page_j = sum(adjacency_matrix[j])
                    new_pagerank[i] += damping_factor * (pagerank[j] / num_links_on_page_j)
                    new_pagerank[i] += teleport_prob

        pagerank = new_pagerank

        # Calculate and print PageRank after each iteration
        print(f'Iteration {iteration + 1}:')
        for i, score in enumerate(pagerank):
            print(f'Page {i + 1}: {score:.4f}')

    return pagerank

graph = np.array([[0, 1, 1, 1],
              [0, 0, 0, 1],
              [0, 1, 0, 1],
              [0, 0, 1, 0]])

pagerank_scores = calculate_pagerank(graph)

# Sort the PageRank scores with numbers
sorted_pagerank = sorted(enumerate(pagerank_scores), key=lambda x: x[1], reverse=True)

print('\nSorted PageRank scores with numbers:')
for i, (page, score) in enumerate(sorted_pagerank, start=1):
    print(f'Rank {i}: Page {page + 1} - PageRank: {score:.4f}')
